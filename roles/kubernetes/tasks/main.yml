---

- name: Create directory structure
  file:
    path: "{{ item }}"
    owner: root
    group: root
    state: directory
    mode: 0755
  with_items:
    - '{{ auth_path }}'
    - '{{ ssl_path }}'
  when: "'{{ k8s_dict.instances[0].name }}' == inventory_hostname"

- name: Copy templates
  template:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    owner: "{{ item.owner }}"
    group: "{{ item.group }}"
    mode: "{{ item.mode }}"
    backup: no
  with_items:
    - info:
      src: 'auth-password.csv.j2'
      dest: '{{ auth_password_file }}'
      owner: root
      group: root
      mode: '0664'
    - info:
      src: 'auth-token.csv.j2'
      dest: '{{ auth_token_file }}'
      owner: root
      group: root
      mode: '0664'
    - info:
      src: 'openssl.cnf.j2'
      dest: '{{ ssl_openssl_cnf_file }}'
      owner: root
      group: root
      mode: '0664'
  notify:
    - restart kube-apiserver
  when: "'{{ k8s_dict.instances[0].name }}' == inventory_hostname"

# https://coreos.com/kubernetes/docs/latest/openssl.html
- name: Create SSL certificates
  command: "{{ item.command }}"
  args:
    chdir: '{{ ssl_path }}'
    creates: '{{ ssl_path }}/{{ item.creates }}'
  with_items:
    - info:
      command: 'openssl genrsa -out ca-key.pem 2048'
      creates: 'ca-key.pem'
    - info:
      command: 'openssl req -x509 -new -nodes -key ca-key.pem -days 10000 -out ca.pem -subj "/CN=kube-ca"'
      creates: 'ca.pem'
    - info:
      command: 'openssl genrsa -out apiserver-key.pem 2048'
      creates: 'apiserver-key.pem'
    - info:
      command: 'openssl req -new -key apiserver-key.pem -out apiserver.csr -subj "/CN=kube-apiserver" -config openssl.cnf'
      creates: 'apiserver.csr'
    - info:
      command: 'openssl x509 -req -in apiserver.csr -CA ca.pem -CAkey ca-key.pem -CAcreateserial -out apiserver.pem -days 3650 -extensions v3_req -extfile openssl.cnf'
      creates: 'apiserver.pem'
    - info:
      command: 'openssl genrsa -out admin-key.pem 2048'
      creates: 'admin-key.pem'
    - info:
      command: 'openssl req -new -key admin-key.pem -out admin.csr -subj "/CN=kube-admin"'
      creates: 'admin.csr'
    - info:
      command: 'openssl x509 -req -in admin.csr -CA ca.pem -CAkey ca-key.pem -CAcreateserial -out admin.pem -days 3650'
      creates: 'admin.pem'
  when: "'{{ k8s_dict.instances[0].name }}' == inventory_hostname"

- name: Configure kubernetes master
  lineinfile:
    dest: "{{ item.dest }}"
    line: "{{ item.line }}"
    regexp: "{{ item.regexp }}"
  with_items:
    - info:
      dest: '/etc/kubernetes/config'
      line: 'KUBE_MASTER="--master=http://{{ k8s_dict.instances[0].name }}:8080"'
      regexp: 'KUBE_MASTER'
    - info:
      dest: '/etc/kubernetes/apiserver'
      line: 'KUBE_API_ADDRESS="--address=0.0.0.0"'
      regexp: 'KUBE_API_ADDRESS'
    - info:
      dest: '/etc/kubernetes/apiserver'
      line: 'KUBE_ETCD_SERVERS="--etcd-servers=http://{{ k8s_dict.instances[0].name }}:2379,http://{{ k8s_dict.instances[1].name }}:2379,http://{{ k8s_dict.instances[2].name }}:2379"'
      regexp: 'KUBE_ETCD_SERVERS'
    - info:
      dest: '/etc/kubernetes/apiserver'
      line: 'KUBE_ADMISSION_CONTROL="--admission-control=NamespaceLifecycle,NamespaceExists,LimitRanger,SecurityContextDeny,ResourceQuota"'
      regexp: 'KUBE_ADMISSION_CONTROL'
    - info:
      dest: '/etc/kubernetes/apiserver'
      line: 'KUBE_API_ARGS="--basic-auth-file={{ auth_password_file }} --token-auth-file={{ auth_token_file }} --kubelet-https=true --secure-port=443 --tls-cert-file={{ ssl_path }}/apiserver.pem --tls-private-key-file={{ ssl_path }}/apiserver-key.pem"'
      regexp: 'KUBE_API_ARGS'
  notify:
    - restart kube-apiserver
    - restart kube-controller-manager
    - restart kube-scheduler
  when: "'{{ k8s_dict.instances[0].name }}' == inventory_hostname"

- name: Configure kubernetes workers nodes
  lineinfile:
    dest: "{{ item.dest }}"
    line: "{{ item.line }}"
    regexp: "{{ item.regexp }}"
  with_items:
    - info:
      dest: '/etc/kubernetes/config'
      line: 'KUBE_MASTER="--master=http://{{ k8s_dict.instances[0].name }}:8080"'
      regexp: 'KUBE_MASTER'
    - info:
      dest: '/etc/kubernetes/kubelet'
      line: 'KUBELET_ADDRESS="--address=0.0.0.0"'
      regexp: 'KUBELET_ADDRESS'
    - info:
      dest: '/etc/kubernetes/kubelet'
      line: '# KUBELET_HOSTNAME=""'
      regexp: 'KUBELET_HOSTNAME'
    - info:
      dest: '/etc/kubernetes/kubelet'
      line: 'KUBELET_API_SERVER="--api-servers=http://{{ k8s_dict.instances[0].name }}:8080"'
      regexp: 'KUBELET_API_SERVER'
  notify:
    - restart kubelet
    - restart kube-proxy

- name: Ensure services are started and enabled on master node
  service:
    name: '{{ item }}'
    enabled: yes
    state: started
  with_items:
    - 'kube-apiserver'
    - 'kube-controller-manager'
    - 'kube-scheduler'
  when: "'{{ k8s_dict.instances[0].name }}' == inventory_hostname"

- name: Ensure services are started and enabled on worker nodes
  service:
    name: '{{ item }}'
    enabled: yes
    state: started
  with_items:
    - 'kubelet'
    - 'kube-proxy'
