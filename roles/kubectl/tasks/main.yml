---

- name: Create directory structure
  file:
    path: "{{ item }}"
    owner: root
    group: root
    state: directory
    mode: 0755
  with_items:
    - '{{ ssl_path }}'
    - '{{ kubectl_path }}'
  when: ('{{ k8s_dict.instances[1].name }}' == inventory_hostname) or
        ('{{ k8s_dict.instances[2].name }}' == inventory_hostname)

- name: Fetch previously generated certificates
  fetch:
    src: '{{ ssl_path }}/{{ item }}'
    dest: '/tmp/{{ item }}'
    flat: yes
  with_items:
    - 'ca.pem'
    - 'admin-key.pem'
    - 'admin.pem'
  when: "'{{ k8s_dict.instances[0].name }}' == inventory_hostname"

- name: Copy certficates
  copy:
    src: '/tmp/{{ item }}'
    dest: '{{ ssl_path }}/{{ item }}'
    owner: root
    group: root
    mode: 0664
  with_items:
    - 'ca.pem'
    - 'admin-key.pem'
    - 'admin.pem'
  when: ('{{ k8s_dict.instances[1].name }}' == inventory_hostname) or
        ('{{ k8s_dict.instances[2].name }}' == inventory_hostname)

- name: Configure kubectl
  command: "{{ item }}"
  with_items:
    - 'kubectl config set-cluster default-cluster --server=https://{{ k8s_dict.instances[0].name }} --certificate-authority={{ ssl_path }}/ca.pem'
    - 'kubectl config set-credentials default-admin --username={{ kubectl_username }} --password={{ kubectl_password }} --certificate-authority={{ ssl_path }}/ca.pem'
    - 'kubectl config set-context default-system --cluster=default-cluster --user=default-admin'
    - 'kubectl config use-context default-system'
  when: ('{{ k8s_dict.instances[1].name }}' == inventory_hostname) or
        ('{{ k8s_dict.instances[2].name }}' == inventory_hostname)
